#!/bin/bash
#######################################################################################
#
# Funcoes Consulta Linux (funcoesCL) rev213
# Biblioteca de ferramentas e mini aplicativos para linha de comando.
#
# INICIADO:	= 21 de Novembro de 2013
# MODIFICADO:	= 03 de Setembro de 2019
#
# SITE:		= https://www.consultalinux.org
# AUTOR:	= Alan Victor Mesquita Leite    [alanvictorjp gmail com]
#
#######################################################################################
AJUDA="
		    _____				  ____ _
		   |  ___|   _ _ __   ___ ___   ___  ___ / ___| |
		   | |_ | | | | '_ \ / __/ _ \ / _ \/ __| |   | |
		   |  _|| |_| | | | | (_| (_) |  __/\__ \ |___| |___
		   |_|   \__,_|_| |_|\___\___/ \___||___/\____|_____|

#######################################################################################

$0 <opcoes>

off -i | --install		Instala as funcoesCL no ambiente do usuario
off -u | --update		Atualiza as funcoesCL para a ultima versao estavel
    -h | --help			Exibe o menu ajuda da ferramenta
    -l | --list			Lista as funcoesCL disponiveis
    -v | --version		Informacoes do software


INSTALACAO

 1 -	Como root, baixe o codigo fonte no site oficial do projeto:
     	wget http://consultalinux.org/sources/funcoesCL.tar.gz

 2 - 	Descompacte e instale as funcoesCL:
     	tar -xf funcoesCL.tar.gz && ./funcoesCL --install

 3 - 	Apos a instalacao, no terminal digite: source /etc/funcoesCL

 4 - 	Para ver todas as funcoes diponiveis, digite no terminal: CL <TAB> <TAB>
     	escreva CL e tecle 2x TAB, sera exibido todas as FuncoesCL
"

# INICIO DAS FUNCOES
#######################################################################################

CLcores() {

	help='
	# Funcao CLcores
	# Alan Victor Mesquita Leite viveu
	# 21/11/2013
	#
	# CLcores: Ativa cores no terminal e nas funcoes.
	#
	# [USO]:
	#	       CLcores --(OPCAO)
	#
	# [EXEMPLOS]:
	#	       CLcores --ativar
	#	       Ativa Cores no terminal
	#
	# [USANDO NA SHELL CORRENTE]:
	#
	#	       CLcores --ativar
	#	       Ativa o uso de cores na shell corrente
	#
	#	       echo -e "${codigo}${fazul}${verdeClaro} TEXTO ${finall}"
	#'

	case $1 in

	--ativar)

	# INICIO DE CODIGO DE CORES
	codigo="\033["
	# CORES DE FUNDO
	fpreto="40;";fvermelho="41;";fverde="42;";fmarron="43;";fazul="44;";fpurple="45;";fcyan="46;";fcinza="47;";
	# CORES DE LETRAS
	corPadrao="0m";preto="0;30m";vermelho="0;31m";verde="0;32m";marrom="0;33m";azul="0;34m"
	purple="0;35m";cyan="0;36m";cinzaClaro="0;37m";pretoCinza="1;30m";vermelhoClaro="1;31m"
	verdeClaro="1;32m";amarelo="1;33m";azulClaro="1;34m";purpleClaro="1;35m";cyanClaro="1;36m";branco="1;37m"
	# FIM DA COR
	finall="\033[0m"
	tcolor="${codigo}${cyan}"
	rcolor="${codigo}${vermelhoClaro}"
	gcolor="${codigo}${verdeClaro}"

	eco_verde() { echo -ne "${codigo}${verde}$*${finall}"; }
	eco_verde_claro() { echo -ne "${codigo}${verdeClaro}$*${finall}"; }
	eco_marron() { echo -ne "${codigo}${marron}$*${finall}"; }
	eco_azul() { echo -ne "${codigo}${azul}$*${finall}"; }
	eco_azul_claro() { echo -ne "${codigo}${azulClaro}$*${finall}"; }
	eco_roxo() { echo -ne "${codigo}${purple}$*${finall}"; }
	eco_roxo_claro() { echo -ne "${codigo}${purpleClaro}$*${finall}"; }
	eco_cyan() { echo -ne "${codigo}${cyan}$*${finall}"; }
	eco_cyan_claro() { echo -ne "${codigo}${cyanClaro}$*${finall}"; }
	eco_cinza_claro() { echo -ne "${codigo}${cinzaClaro}$*${finall}"; }
	eco_vermelho() { echo -ne "${codigo}${vermelho}$*${finall}"; }
	eco_vermelho_claro() { echo -ne "${codigo}${vermelhoClaro}$*${finall}"; }
	eco_amarelo() { echo -ne "${codigo}${amarelo}$*${finall}"; }
	eco_branco() { echo -ne "${codigo}${branco}$*${finall}"; }
	;;

	-l|--listar|-h|*)
		echo "$help"
		cat /etc/funcoesCL | grep '\s\+eco_[a-z_]\+()' | sed 's/eco/# eco/;s/(.*//;1s/^/\t#\n\t# Funções para uso no terminal\n\t#\n/;$s/$/\n\t#/'
		allcores=$(cat /etc/funcoesCL |	grep -A 11 "\-\-ativar)"|grep -v "\-\-ativar"|sed '/\s\+#/d;/^$/d;s/\s\+//;s/="[^"]*"//g;s/;/ /g;s/^/\t\t\t/g')
		echo
		echo "	[VARIAVEIS DE CODIGO DE CORES]:"
		echo "$allcores"
		;;

	esac

}

CLverifica_csrf() {
    clear
    help="
    #
    # Funcao CLverifica_csrf
    # Alan Victor Mesquita Leite
    # 21/09/2019
    #
    # CLverifica_linha: verifica formulários vulneráveis a ataques CSRF
    #
    # [USO]:
    #          CLverifica_csrf [csrf_string_code] [diretorio]
    #          CLverifica_csrf csrf_token /var/www/view/
    #
    # [INFORMACAO]:
    #          Verifica no diretorio /var/www/view/, formulários que possuem code_string relacionado a csrf
    #
    # [HELP]:
    #          CLverifica_csrf --help
    #
    "

    [[ -z $1 || -z $2 ]] && { echo "$help" ; return 0 ; }
    CLcores --ativar
    var=$(grep -R -i '<form ' $2 | sed 's/:.*//' | sort -u)

    for i in $var ; do
        grep -R -i -q "$1" $i && {
            eco_verde "$i" ;
            eco_verde_claro " existe " ;
            eco_verde "$1\n" ;
        }||{
            eco_vermelho "$i" ;
            eco_vermelho_claro " não existe " ;
            eco_vermelho "$1\n" ;
        }
    done
}


CLhotswap() {
    help="
    #
    # Funcao CLhotswap
    # Alan Victor Mesquita Leite
    # 04/02/2018 | 03/09/2019
    #
    # CLhotswap: Conecta e Desconecta dispositivos de armazenamento serial
    #
    # [USO]: hotswap [argumento]
    #
    #   hotswap -s | --scan
    #       Levanta dispositivos de armazenamento serial.
    #
    #   hotswap -d | --delete
    #       Desmonta e remove com segurança.
    #
    #   hotswap -h | --help
    #       Mostra Esse help!
    #
    "

	null=/dev/null
	arg1=$1

	clear
	echo -en "\n\tHOTSWAP\n"

	case $arg1 in
		-s|--scan)
			a=$(ls /dev/sd[a-z])
				for portas in $(ls -d /sys/class/scsi_host/host* | sed 's/^.*host//') ; do
					echo "- - -" > /sys/class/scsi_host/host$portas/scan
				done
			b=$(ls /dev/sd[a-z])


			for i in $b ; do
			        saida=$(echo $a | grep -q $i || echo $i)
			done

			[[ -z $saida ]] && {
				echo "Nenhum dispositivo a ser levantado!";
			}||{
				echo "Dispositivo levantado: $saida";
			}
		;;

		-d|--delete)

			a=1
			ls=$(fdisk -l 2> $null | grep '\(^Disco\|^Disk\) \/dev' | sed 's/,\s[0-9]\{4,\}.*//g')
			lines=$(echo "$ls" | wc -l)

			echo "$ls" | \
			while read i ; do
				echo [ $a ] $i
				a=$(($a + 1))
			done

			read -p 'Opção: ' opt

			[[ $opt =~ ^[0-9]$ && $opt -le $lines ]] || {
				echo "Opção invalida!";
				return 1;
			}

			[[ -d $(echo "$ls" | sed -n "${opt}p" | sed 's/^.*dev\/\(sd[a-z]\).*/\1/') ]] || {
				echo 'Dispositivo não conectado!';
				return 1;
			}

			read -p 'Parece tudo pronto para desconectar, Continuar? [S/n]: ' opt
			[[ -z $opt ]] && opt=s

			case $opt in
				s|S)
				umount /dev/${dev}* 2> $null
				sleep 2
				echo offline > /sys/block/$dev/device/state && sleep 1 && \
				echo 1 > /sys/block/$dev/device/delete && \
				echo 'Dispositivo pode ser removido com segurança!'
				;;

				*)
				echo 'Saindo...';
				return 1;
				;;
			esac
		;;

		-h|--help|*)
			clear ; echo "$help"
			;;
	esac
}

CLssldissect() {
	help="
	#
	# Funcao CLdissect
	# Alan Victor Mesquita Leite
	# 29/10/2018
	#
	# CLssldissect: ssl dissect...
	#
	# [USO]:
	#	CLssldissect [arquivo cap] [arquivo log] [chave privada]
	#	CLssldissect cap.pcapng saida.log /root/ca.pem
	#
	# [CAPTURANDO]:
	#	tshark -P -f tcp -w file.pcapng
	#
	#
	#
	"
	cap=$1
	log=$2
	privkdir=$3
	tshark=$(which tshark)
	[[ -z $tshark ]] && { echo "tshark não instalado!"; return 1 ; }
	[[ -z $cap || -z $log || -z $privkdir ]] && { echo -e "\nFalta argumentos!\n"; echo "$help" ; return 1;  }

	tshark -r cap1 -V -x \
		-o "ssl.debug_file:$log" \
		-o "ssl.desegment_ssl_records: TRUE" \
		-o "ssl.desegment_ssl_application_data: TRUE" \
		-o "ssl.keys_list:0.0.0.0,443,http,$privkdir"

}

CLstrace() {
	help="
	#
	# Funcao CLstrace
	# Alan Victor Mesquita Leite
	# 26/10/2018
	#
	# CLstrace: Capturador de teclas de sessão
	#
	# [USO]:
	#	CLstrace -c [PID]		Captura teclas de um processo(bash)
	#	CLstrace -c 3454		Captura teclas da bash(pts) pid 3454
	#	CLstrace -r			Mostra teclas capturadas
	#
	"
opt=$1
pid=$2
case $opt in
        -c|--capture)
                strace -p $pid &> /tmp/cap
        ;;

        -r|--read)
                pkill $(basename $0)
                var=$(cat /tmp/cap | grep 'write(' | sed 's/^.*\(".*"\).*$/\1/;s/"//g')
                echo -e $var | sed 's/\s//g;s/#/# /g'
        ;;
        *)
                echo "$help";;
esac

}

CLtraffic() {
	help="
	#
	# Funcao CLtraffic
	# Alan Victor Mesquita Leite
	# 26/10/2018
	#
	# CLtraffic: Mostra trafego Download e Upload de interfaces
	#
	# [USO]:
	#	      CLtraffic -h | --help
	#
	#	      CLtraffic [ SEM ARGUMENTOS ]
	#
	"
	[[ $1 =~ ^-h|--help$ ]] && { echo "$help" ; return 1 ; }

	CLcores --ativar

	[[ $(which bc) ]] || { echo "Calculadora BC nao instalado!" ; return 1; }

	a=1
	ls=$(ls /sys/class/net/)
	for i in $ls ; do
		echo [ $a ] $i
		a=$(($a + 1))
	done ; a=$(($a - 1))
	read -p 'Opção: ' opt

	[[ -z $opt ]] && opt=1
	[[ $opt =~ ^[0-9]$ && $opt -le $a ]] || { echo "Número invalido!"; return 0 ; }


	iface=$(echo "$ls" | sed -n "${opt}p")

        while : ; do
                rx1=$(cat /sys/class/net/$iface/statistics/rx_bytes)
                tx1=$(cat /sys/class/net/$iface/statistics/tx_bytes)
                sleep 0.99
                rx2=$(cat /sys/class/net/$iface/statistics/rx_bytes)
                tx2=$(cat /sys/class/net/$iface/statistics/tx_bytes)
                rx3=$(($rx2 - $rx1))
                tx3=$(($tx2 - $tx1))

                rx4=$(echo "scale=2; ($rx3 / 1000) * 8" | bc -l | sed 's/^\./0./')
                tx4=$(echo "scale=2; ($tx3 / 1000) * 8" | bc -l | sed 's/^\./0./')


                if (echo $rx4 | grep -q '^[0-9]\{4,\}\.[0-9]\+$') ; then
                        rx5=$(echo "scale=2; $rx4 / 1024"|bc);
                        rx6="$rx5 Mb/s"
                else
                        rx6="$rx4 Kb/s"
                fi


                if (echo $tx4 | grep -q '^[0-9]\{4,\}\.[0-9]\+$') ; then
                        tx5=$(echo "scale=2; $tx4 / 1024"| bc);
                        tx6="$tx5 Mb/s"
                else
                        tx6="$tx4 Kb/s"
                fi

                clear
                eco_branco "CLtraffic em [ $iface ]\n"
                eco_branco "===========================\n"
                eco_verde_claro "Download:    $rx6 \n"
                eco_verde_claro "Upload:      $tx6 \n"
        done
}

CLsysdig() {

	[[ $(which sysdig) ]] || { echo "Programa Sysdig não instalado!"; return 1 ; }
	CLcores --ativar
        help="
        #
        # Funcao CLsysdig
        # Alan Victor Mesquita Leite
        # 25/10/2018
        #
        # CLsysdig: Captura informacoes em baixo nivel e tempo real do sistema
        #
        # [USO]: Clsysdig [OPCAO]
	#
	#		-net		Mostra processos usando a rede
	#		-io		Mostra i/o de arquivos e processos
	#		-cpu		Mostra processos usando cpu e tempo de execução
        #		-log		Mostra detalhado di sistema, syslog e messages
	#		-sec		Mostra informacoes como ataque shellchock e atividades de usuarios
	#		-h		Mostra esse help.
        "

	case $1 in
		-net) sysdig -c topprocs_net ;;


		-io)
			eco_branco '\n[1] I/O de arquivos no sistema\n'
			eco_branco '[2] I/O de processos no sistema\n'
			read -p 'Opção: ' opt2
			case $opt2 in
				1) sysdig -c topfiles_bytes ; echo ok;;
				2) sysdig -c topprocs_file ;;
			esac
		;;


		-cpu)
			eco_branco '\n[1] Processos ultilizando CPU\n'
			eco_branco '[2] Processo em tempo de execução\n'
			read -p 'Opção: ' opt3
			case $opt3 in
				1) sysdig -c topprocs_cpu ;;
				2) sysdig -c proc_exec_time ;;
			esac
		;;


		-log) sysdig -c spy_logs ;;

		-sec)
			eco_branco '\n[1] Ataques de shellchock em execução\n'
			eco_branco '[2] Interatividade de usuários\n'
			read -p 'Opção: ' opt5
			case $opt5 in
				1) sysdig -c shellshock_detect ;;
				2) sysdig -c spy_users ;;
			esac
		;;

		*) echo "$help" ;;
esac
}


CLgeoip() {

	help="
	#
	# Funcao CLgeoip
	# Alan Victor Mesquita Leite
	# 19/10/2018
	#
	# CLgeoip: Mostra informacoes e localização de ips (geoip)
	#
	# [USO]:
	#	      CLgeoip ip
	#	      CLgeoip 8.8.8.8
	#
	"



	[[ -z $1 ]] && { echo "$help" ; return 1 ; }
	[[ $(which lynx) ]] || { echo "Lynx nao instalado!" ; return 1 ; }

	var=$(lynx -dump http://www.ip-tracker.org/locator/ip-lookup.php?ip=$1|\
	sed -n '/^\s\+IP Address:/,/\s\+IDD Code:/p'| sed 's/^\s\+//;/Internet Speed/d;/Blacklist Check/d')

	cord=$(echo "$var" | grep '^City Lat\/Lon' | sed 's/^.*(\(.*\)).*(\(.*\))/\1;\2/')
	lat=$(echo $cord | cut -d ';' -f1)
	lon=$(echo $cord | cut -d ';' -f2)

	CLcores --ativar

	clear
	echo
	eco_branco "CLgeoip: Informação e Localização de IPs\n"
	eco_branco "###################################################\n"
	echo "$var" | grep --color -e "^" -e '^City.*\|Country:.*\|Orga.*\|^IP Add.*\|'
	eco_branco "###################################################\n"
	echo
	eco_branco "GEOLOCALIZAÇÃO\n"
	eco_branco "Link: "
	eco_verde_claro "https://www.google.com/maps/search/?api=1&query=$lat,$lon\n"
	echo
}

CLsubnetmask() {

        help="
        #
        # Funcao CLsubnetmask
        # Alan Victor Mesquita Leite
        # 28/10/2018
        #
        # CLsubnetmask: Calcula mascara de subredes
        #
        # [USO]:
        #             CLsubnetmask ip mascara
        #             CLsubnetmask 192.168.1.1 255.255.255.240
        #             CLsubnetmask 192.168.1.1 255.255.248.0
        #
        "

        [[ $1 =~ ^-h|--help$ || -z $1 ]] && { echo "$help" ; return 1 ; }
        [[ $2 =~ ^-h|--help$ || -z $2 ]] && { echo "$help" ; return 1 ; }

        _mask() {
                count=0
                for i in $(seq 8) ; do
                        echo -n '{0..1}'
                done > /tmp/clbinario.tmp

                for j in $(eval echo $(cat /tmp/clbinario.tmp)) ; do
                        echo "$j;$count"
                        count=$(($count + 1))
                done | column -s ';' -t| grep "^.*\s\+$1$" | sed 's/\s\+.*//'
        }

	# ip binario
        bitip=$(for i in $(echo $1 | sed 's/\./ /g') ; do echo -n "$(_mask $i)." ; done | sed 's/\.$/\n/')

	# mascara binaria
        bitmask=$(for i in $(echo $2 | sed 's/\./ /g') ; do echo -n "$(_mask $i)." ; done | sed 's/\.$/\n/')

	# quantidade de bits de rede cidr
	cidr=$(echo "$bitmask"| sed 's/\.//g;s/[0]\+$//;s/[1]/&\n/g' | sed '/^$/d' | wc -l)

	# quantidade de bits de host
	dec_bit_host=$((32 - $cidr))

	# quantidade hosts
	hosts=$((2**$dec_bit_host - 2))

	# gerando bits de broadcast
	bits_mask=$(for ((i=1;i<=$dec_bit_host;i++)) ; do echo 1 ; done | tr -d '\n''');

	# gerando bits de rede
	bits_host=$(for ((i=1;i<=$dec_bit_host;i++)) ; do echo 0 ; done | tr -d '\n''');

	# ip de rede
	rede=$(echo $bitip | sed 's/\.//g' | sed "s/[0-1]\{$dec_bit_host\}$/$bits_host/" |sed 's/[0-1]\{8\}/& /g;s/ $//')

	# ip de broadcast
	broad=$(echo $bitip | sed 's/\.//g' | sed "s/[0-1]\{$dec_bit_host\}$/$bits_mask/" |sed 's/[0-1]\{8\}/& /g;s/ $//')

	network=$(for i in $rede; do echo $((2#$i));done | tr '\n' ' ' | sed 's/ /./g;s/\.$//')
	broadcast=$(for i in $broad; do echo $((2#$i));done | tr '\n' ' ' | sed 's/ /./g;s/\.$//')

	primeiro_ip=$(echo $(( $(echo "$network" | sed 's/^.*\.\([0-9]\{1,3\}\)$/\1/') + 1 )))
	ultimo_ip=$(echo $(( $(echo "$broadcast" | sed 's/^.*\.\([0-9]\{1,3\}\)$/\1/') - 1 )))

	first_ip=$(echo $network | sed "s/\.[0-9]\{1,3\}$/.$primeiro_ip/")
	last_ip=$(echo $broadcast | sed "s/\.[0-9]\{1,3\}$/.$ultimo_ip/")


#	Primeiro IP:;$network" | sed "s/\.[0-9]\{1,3\}$/.$primeiro_ip/
#	Ultimo IP:;$broadcast" | sed "s/\.[0-9]\{1,3\}$/.$ultimo_ip/

	echo "CLsubnetmask:"
	echo "============================================"

	echo "
	Network:;$network
	Broadcast:;$broadcast
	Primeiro IP:;$first_ip
	Ultimo IP:;$last_ip
	Hosts válidos:;$hosts
	Mascara CIDR:;/$cidr
	" | sed 's/^\s\+//' |column -s ';' -t
	echo "============================================"
}

CLnetmask() {

	help="
	#
	# Funcao CLnetmask
	# Alan Victor Mesquita Leite
	# 18/09/2018
	#
	# CLnetmask: Mostra mascara de rede em formato binario
	#
	# [USO]:
	#	      CLnetmask -h
	#	      CLnetmask 255.255.255.240
	#
	"

	[[ $1 =~ ^-h|--help$ || -z $1 ]] && { echo "$help" ; return 0 ; }

	_mask() {
	        count=0
	        for i in $(seq 8) ; do
	                echo -n '{0..1}'
	        done > /tmp/clbinario.tmp

	        for j in $(eval echo $(cat /tmp/clbinario.tmp)) ; do
	                echo "$j;$count"
	                count=$(($count + 1))
	        done | column -s ';' -t| grep "^.*\s\+$1$" | sed 's/\s\+.*//'
	}

	for i in $(echo $1 | sed 's/\./ /g') ; do
	        echo -n "$(_mask $i)."
	done | sed 's/\.$/\n/'
}

CLbrutedetect() {

	help="
	#
	# Funcao CLbrutedetect
	# Alan Victor Mesquita Leite
	# 17/09/2018
	#
	# CLbrutedetect: Mostra tentativas de brute-force em SSH
	#
	# [USO]:
	#	      CLbrutedetect
	#
	"

	[[ $1 =~ ^-h|--help$ ]] && { echo "$help" ; return 0 ; }

	tentativas=10

        clear
        lista=$(cat /var/log/auth.log| grep -a 'Failed pass' | sed 's/invalid user //' |sed 's/\s\+/ /g' | cut -d ' ' -f 3,9,11 | sed 's/^\([0-9]\+:[0-9]\+\)\(:[0-9]\+\)/\1/')

        [[ -z $lista ]] && { echo "SEM ATAQUES DETECTADOS!"; return 0 ; };

        ips=$(echo "$lista" | cut -d ' ' -f3 | sort | uniq)

        echo
        echo "TENTATIVAS DE ATAQUE BRUTE-FORCE NO SERVIÇO SSHD"
        echo =========================================================
        for i in $ips ; do
                datas=$(echo "$lista" | grep $i | cut -d ' ' -f1 | sort | uniq)
                users=$(echo "$lista" | grep $i | cut -d ' ' -f2 | sort | uniq)
                users_line=$(echo $users | sed 's/ /;/g')

                for j in $datas ; do
                        conta+=$(echo "$lista" | grep $i | grep -c "$j")
                        conta+=";"
                        maior=$(echo $conta | sed 's/;$//;s/;/\n/g' | sort -n | tail -1)
                done
                unset conta

                ($(echo $users_line | grep -q ';')) &&  { usuarios=USUÁRIOS ; } || { usuarios=USUÁRIO ; }

                if [[ $maior -ge $tentativas ]] ; then
                        echo "IP:%$i
                        $usuarios:%$users_line
                        TENTATIVAS:%$maior (por minuto)
			"| sed 's/^\s\+//'|column -s '%' -t
                        echo "--------------------------------------------------"
                fi
        done > /tmp/brute.txt
        cat /tmp/brute.txt

        echo -e '\n'
        echo TOTAL GERAL DE TENTATIVAS DOS ATACANTES
        echo =========================================================
        cat /tmp/brute.txt | grep '^IP' | sed 's/\s\+/ /g' | cut -d ' ' -f 2 | sort| uniq | \
        while read line ; do
                total=$(cat /var/log/auth.log | grep -a "Failed pass.*$line" | wc -l)
                echo "IP:;$line
                TOTAL:;$total
		"| sed 's/^\s\+//'|column -s ';' -t
                echo
        done

}

CLports() {
	help="
	#
	# Funcao CLports
	# Alan Victor Mesquita Leite
	# 05/06/2018
	#
	# CLports: Busca informações de portas (rede)
	#
	# [USO]:
	#	      CLports [PORTA]
	#
	# [EXEMPLOS]:
	#
	#	      CLports -h ou --help
	#	      Help do comando CLports
	#
	#	      CLports 22
	#	      Busca informação da porta 22
	#
	#
	"

	[ -z $1 ] && echo "$help";
	[[ $1 =~ ^[0-9]+$ ]] && {
		lynx -dump "https://www.speedguide.net/port.php?port=$1"| sed -n '/\[[0-9]\+\] search/,/^.*jump to:/p'| sed '/.*______*.*/d;/^$/d'|more
	}||{
		echo "Porta inválida!";
	}
}

CLtabulacao() {
	help="
	#
	# Funcao CLtabulacao
	# Alan Victor Mesquita Leite
	# 21/05/2014
	#
	# CLtabulacao: Organiza o script com tabulacoes
	#
	# [USO]:
	#	      CLtabulacao --(OPCAO)
	#
	# [EXEMPLOS]:
	#
	#	      CLtabulacao -h ou --help
	#	      Help do comando CLtabulacao
	#
	#	      CLtabulacao script.sh
	#	      Tabula espacos no script
	#
	#
	"

	if [ -z $@ ] || [ $1 == "-h" ]; then
		echo "$help"
		return 0;
	else

		if [ ! -f $1 ]; then
			printf "Arquivo ORIGEM nao encontrado.\n";
			return 1;
		else

			RANDO=$(echo $RANDOM);
			cat $1 | sed 's/[ ]\{8\}/\t/g' > ${1}-$RANDO;
			if [ -f ${1}-$RANDO ]; then
				printf "\n Arquivo Tabulado: ${1}-$RANDO\n";
			else
				printf "\n Houve algum erro na criacao.\n";
				return 1;
			fi
		fi
	fi

}

CLkeygen() {

	_help="
	#
	# Funcao CLkeygen
	# Alan Victor Mesquita Leite
	# 23/10/2018
	#
	# CLkeygen: Gerencia, faz backup e envia novas chaves para os servidores
	#
	# [USO]:
	#		CLkeygen
	#
	# [INFORMACOES]:
	#	CLkeygen faz backup de sua chave privada antiga detro de
	#	/root/.ssh/, cria novas chaves e envia a publica para
	#	os seus servidores.
	#
	#	Depende da funcao (CLssh), pois usa o arquivo de profile
	#	/root/,clssh_profile para saber dos seus servidores.
	#
	# [NOTAS]:
	#	Tanto execucao da funcao quanto conexoes e envio de chaves
	#	no momento so suporta com usuario root.
	#
	#	E necessario locais e nome de chaves manter o padrao, ou seja
	#	diretorio /root/.ssh/ e nome chave id_rsa e id_rsa.pub
	#
	#	Por padrao, foi mantido a localizacao remota da chave publica em
	#	/root/.ssh/authorized_keys
	#
	#	Certifique se seu servidor remoto esta configurado para ler
	#	a chave publica no local padrao /root/.ssh/authorized_keys
	#
	"

	CLcores --ativar
	clear
	echo "$_help";

	eco_branco "\n\tDeseja continuar o procedimento? [s/N]: "
	read opt
	[[ -z $opt || $opt =~ ^[nN]$ ]] && return 1 ;

	clssh=/root/.clssh_profile
	privkey=/tmp/keys/id_rsa
	pubkey=/tmp/keys/id_rsa.pub
	null=/dev/null
	date=$(date "+%Y%m%d%H%M%S")

	[[ $(id -u) == '0' ]] || { echo "Voce nao e root!" ; return 1; }
	[[ -d /tmp/keys ]] || mkdir /tmp/keys
	[[ -d /root/.ssh/back_keys ]] || mkdir /root/.ssh/back_keys

	[[ -e $clssh && -s $clssh ]] || {
		echo "Arquivo de profile /root/.clssh_profile nao existe ou esta vazio!";
		return 1;
	}

	[[ -e /root/.ssh/id_rsa ]] || {
		echo "Chave privada nao existe ou esta num local nao padrao";
		return 1;
	}

	cp /root/.ssh/id_rsa /root/.ssh/back_keys/id_rsa_$date || {
		echo "Erro ao criar o backup da chave privada (id_rsa)";
		return 1;
	}

	ssh-keygen -t rsa -b 2048 -f /tmp/keys/id_rsa -N '' -q || {
		echo "Erro ao gerar novo par de chaves rsa";
		return 1;
	}

	echo
	cat $clssh |\
	while read i ; do

	        [[ -z $i ]] && continue

	        userhost=$(echo $i | awk {'print $1'})
	        port=$(echo $i | awk {'print $3'})
	        privatekey=$(echo $i | awk {'print $5'})

		[[ -z $userhost || -z $port || -z $privatekey ]] && {
			echo "Erro na criacao de variaveis";
			return 1;
		}

	        scp -P $port -i $privatekey $pubkey $userhost:/root/.ssh/authorized_keys &> $null && {
	                eco_verde "\t$userhost: Chave publica envidada\n" ;
	        } || {
	                eco_vermelho_claro "\t$userhost: Erro ao enviar chave\n" ;
	        }
	done
	cp -f $privkey /root/.ssh/ && {
		echo
		eco_branco "\tChave privada (/root/.ssh/id_rsa) modificada com sucesso!\n";
	}

	rm -rf /tmp/keys &> $null
}

CLssh() {
	help="
	#
	# Funcao CLssh
	# Alan Victor Mesquita Leite
	# 17/08/2015
	#
	# CLssh: Gerenciamento de conexoes ssh, cria profiles
	#	lista e conecta. Bom para quem acessa varios
	#	servidores ssh.
	#
	# [USO]:
	#	      CLssh [OPCAO]
	#		       -p      Cria um novo profile/conexao
	#		       -c      Conecta num profile criado
	#		       -l      Lista os profiles existentes
	#		       -h      Help do comando CLssh
	#
	#
	"

	CLcores --ativar

	DATABASE="$HOME/.clssh_profile"

	if [ ! -f "$DATABASE" ] ; then
		touch $DATABASE
	fi

	case $1 in
		-p)
			echo -e "\n  ${tcolor}${tcolor}Cria profile${finall}${finall}\n"

			echo -n -e "${tcolor}  NOME DO PROFILE:${finall} " ; read NOMEE
			echo -n -e "${tcolor}  HOST:${finall} " ; read IPS
			echo -n -e "\n${tcolor}  USERNAME:${finall} " ; read USERR
			echo -n -e "\n${tcolor}  PORTA:${finall} " ; read PORTA
			echo -n -e "\n${tcolor}  CHAVE PRIVADA:${finall} " ; read CHAVE

			if [ -z "$NOMEE" -o -z "$IPS" -o -z "$USERR" -o -z "$PORTA" ] ; then
				echo -e "\n  ${tcolor}Precisa preencher todos os campos.${finall}\n"
				return 1
			fi

			TODOS=$(cat $DATABASE)
			TEM=$(cat $DATABASE | grep "$NOMEE$" > /dev/null ; echo $?)
			if [ "$TEM" = 0 ] ; then
				echo -e "\n  [${rcolor} ERRO ${finall}] ${tcolor}Esse nome de profile existe, escolha outro.${finall}\n"
			else
				if [ -z $CHAVE ] ; then
					echo "${USERR}@${IPS} -p ${PORTA} ### $NOMEE" >> $DATABASE
				else
					echo "${USERR}@${IPS} -p ${PORTA} -i $CHAVE ### $NOMEE" >> $DATABASE
				fi

					TEM=$(cat $DATABASE | grep "$NOMEE$" > /dev/null ; echo $?)
					if [ "$TEM" = 0 ] ; then
						echo -e "\n  [${gcolor} OK ${finall}] ${tcolor}Profile adicionado na db.${finall}\n"
					fi
			fi
		;;

		-c)
			[ -z "$2" ] && {
			echo -e "\n  [${rcolor} ERRO ${finall}] ${tcolor}Digite um nome de profile, Use:${finall} CLssh -c <NOME>\n"
			return 1
			}

			TEM_RET=$(cat $DATABASE | grep "$2" > /dev/null ; echo $?)
			TEM="ssh $(cat $DATABASE | grep "$2" | sed -n 1p | sed 's/^\s\+//;s/ \+##.*//')"
			TEM_MOSTRA="$(cat $DATABASE | grep "$2" | sed -n 1p | sed 's/^\s\+//;s/ \+##.*//')"
			if [ "$TEM_RET" = "0" ] ; then
				echo -e "\n  ${tcolor}Foi encontrado o profile:${finall}\n"
				echo -e "  ${gcolor}$TEM_MOSTRA${finall}\n"
				echo -e -n "  ${tcolor}Deseja conectar nesse profile? (S/n):${finall} " ; read simnao
				[ -z $simnao ] && simnao="s";
				echo
				CHAVS=0
				case $simnao in
					s)	eval $TEM ;;
					n)	echo -e "\n${tcolor}  Saindo...${finall}\n" ;;
					*)	echo -e "\n${tcolor}  Op Invalida${finall}\n" ;;
				esac

#				if [ "$CHAVS" = 1 ] ; then

			else

				echo -e "\n${tcolor}  Listando os profiles:${finall}"
				ALL=$(cat "$DATABASE")
				echo -e "${gcolor}"
				echo "$ALL" | sed 's/^/  /g'
				echo -e "${finall}"
			fi
		;;

		-l)
			echo -e "\n${tcolor}  Listando os profiles:${finall}"
			ALL=$(cat "$DATABASE")
			echo -e "${gcolor}"
			echo "$ALL" | sed 's/^/  /g'
			echo -e "${finall}"
		;;

		-h)

			echo "$help"
		;;

		*)
			echo -e "\n  [${rcolor} ERRO ${finall}] ${tcolor}Argumento inválido.\n\n  Use:${finall}\n"
			echo -e "${tcolor}  Conecta num profile, ${finall}CLssh -c NOME DO PROFILE\n"
			echo -e "${tcolor}  Cria um novo profile, ${finall}CLssh -p\n"
		;;

	esac
}


CLhttpserver() {
	help="
	#
	# Funcao CLhttpserver
	# Alan Victor Mesquita Leite
	# 02/07/2015
	#
	# CLhttpserver: Servidor Web rapido.
	#
	# [USO]:
	#	       CLhttpserver
	#	       CLhttpserver start
	#	       CLhttpserver --help
	#		CLhttpserver -p <PORTA>
	#		CLhttpserver -p <PORTA> -d <DIR>
	#
	#
	# [INFORMACAO]:
	#	       CLhttpserver e um servidor web rapido
	#	       muito util para dispor/compartilhar arquivos
	#	       como: fotos, musicas, codigos, projetos, e etc.
	#
	#
	# [EXEMPLOS]:
	#		CLhttpserver start
	#		Inicia o servidor web no diretorio atual e porta padrao 8000
	#		http://localhost:8000
	#		http://seu-ip:8000
	#
	#		CLhttpserver -p 8080
	#		Inicia o servidor web no diretorio atual e porta 8080
	#		http://localhost:8080
	#		http://seu-ip:8080
	#
	#		CLhttpserver -p 8090 -d /home/nome/mp3
	#		Inicia o servidor web no diretorio /home/alan/mp3 e porta 8090
	#		http://localhost:8090
	#		http://seu-ip:8090
	#
	# [DICAS]:
	#		Para acesso externo, voce precisa redirecionar a porta especifica
	#		no seu modem ou ativar a funcao DMZ no seu modem apontando
	#		para o seu ip local
	#
	"

	PROCESS=$(ps x | grep "SimpleHTTPServer" | grep -v "grep" > /dev/null ; echo $?)

	if [ $PROCESS -eq "0" ] ; then
		echo -n "Existe uma instancia do CLhttpserver rodando, deseja parar? (S/n)" ; read simnao

			[ -z $simnao ] && simnao=s

			case $simnao in
				s)
				ps x | grep "SimpleHTTPServer" | grep -v "grep" | awk {'print $1'} | xargs kill -9
				return 1
				;;

				n)
				echo "A antiga instancia do CLhttpserver ficara ativa!"
				return 0
				;;

				*)
				echo "Opcao invalida, Escolha (s) ou (n)!"
				return 1
				;;
			esac

	else

		[ -e /var/log/FUNCOESCL/CLhttpserver.log ] || touch /var/log/FUNCOESCL/CLhttpserver.log

	LOGFILE="/var/log/FUNCOESCL/CLhttpserver.log"

	if [ -z $1 ] ; then
		echo "$help"
	fi

	case $1 in
		start)

			if [ -z $2 ] ; then
				echo "Voce nao especificou uma porta nem um diretorio."
				echo "Portanto, porta default: 8000"
				echo "Portanto, diretorio default $(pwd)"
				python -m SimpleHTTPServer &>> $LOGFILE &
			fi
			;;


		-p|--port)
			case $2 in
				20|21|22|23|25|53|80|113|135|137|139|443|3128)
					echo "A porta $2 e uma porta reservada!"
					return 1
					;;

				*)
				teste_portas=$(echo $2 | egrep "^[0-9]{2,4}$" > /dev/null 2>&1 ; echo $?)
				if [ $teste_portas -ne "0" ] ; then
					echo "Digite uma porta valida!"
					echo "Nao e possivel usar portas defaults de servicos como:"
					echo "20, 21, 22, 23, 53, 80, 443, use sempre portas altas."
					echo
					echo "Use portas do tipo:"
					echo "2222, 8000, 8080, 8090"
					return 1
				else

					if [ -z $3 ] ; then
						echo "Voce nao especificou um diretorio"
						echo "Portanto, diretorio default $(pwd)"
						echo "Executando na porta: $2"
						echo
						python -m SimpleHTTPServer $2 &>> $LOGFILE &
						return 0
					else

						case $3 in
							-d|--dir)
								if [ -z $4 -o ! -d $4 ] ; then
									echo "Voce nao especificou um diretorio ou o diretorio nao existe! saindo..."
									return 1
								else
									oldir=$(pwd)
									cd $4
									python -m SimpleHTTPServer $2 &>> $LOGFILE &
									cd $oldir
									echo
									echo "CLhttpserver em execucao!"
									echo "Porta: $2"
									echo "Diretorio $4"
									return 0
									fi
									;;
							*)
								echo "Opcao invalida para, argumento 3 deve ser -d ou --dir!"
								return 1
							;;
						esac
					fi
				fi
				;;
			esac
			;;


		-h|--help)
			;;

			*)
				echo "$help"
#				echo  "Opcao invalida ou em branco, Use: CLhttpserver -h ou --help"
			;;
	  esac
	fi

}

CLmeuip() {
	help="
	#
	# Funcao CLmeuip
	# Alan Victor Mesquita Leite
	# 09/10/2014
	#
	# CLmeup: Mostra o seu ip valido (internet)
	#
	# [USO]:
	#	       CLmeuip
	#	       Comando sem arqgumentos
	#
	#	       CLmeuip -h
	#	       Help do comando CLmeuip
	#
	"

	if [ ! -z $1 ] ; then
		case $1 in
			-h|--help)
			clear
			echo "$help"
			return 0
			;;

		*)	echo "Argumento invalido, digite: CLmeuip -h"
			return 1
			;;
		esac
	fi

	null=/dev/null
	local LYNX=$(which lynx)
	if [ -z $LYNX ] ; then
		echo "Lynx nao instalado"
		return 1
	else
		local IP1=$(lynx -source http://meuip.net.br 2> $null | grep -E -o '([0-9]+\.){3}[0-9]{1,3}' | head -n1)
		[ ! -z $IP1 ] && { echo $IP1 ; return 0 ; } || { local IP2=$(lynx -source http://www.meuip.com.br 2> $null | grep -E -o '([0-9]+\.){3}[0-9]{1,3}' | head -n1) ; }
		[ ! -z $IP2 ] && { echo $IP2 ; return 0 ; } || { local IP3=$(lynx -source http://www.whatsmyip.net 2> $null | grep -E -o '([0-9]+\.){3}[0-9]{1,3}' | head -n1) ; }
		[ ! -z $IP3 ] && { echo $IP3 ; return 0 ; } || { echo "Sem IP para mostrar!" ; return 1 ; }
	fi
}

CLbinario() {
	help="
	#
	# Funcao CLbinario
	# Alan Victor Mesquita Leite
	# 22/05/2015
	#
	# CLbinario: Gera uma tabela binaria
	#
	# [USO]:
	#
	#	CLbinario -tabela [quant de colunas binarias] ex:
	#	CLbinario -tabela 8
	#
	#
	#	CLbinario -decbin [quant cols binarias] [valor em dec] ex:
	#	CLbinario -decbin 8 240
	#
	"

	case $1 in

	-tabela)
		[ -z $2 ] && { echo "Digite o segundo argumento!" ; return 1 ; }
		[ $2 -gt 14 ] && { echo "O maximo exibido é de 14 colunas binárias" ; return 1 ; }

                count=0
                for i in $(seq $2) ; do
                        echo -n '{0..1}'
                done > /tmp/clbinario.tmp

                for j in $(eval echo $(cat /tmp/clbinario.tmp)) ; do
                        echo "$j;$count"
                        count=$(($count + 1))
                done | column -s ';' -t

	;;

	-decbin)
		[ -z $2 ] && { echo "Digite a quantidade de colunas binarias no argumento 2!" ; return 1 ; }
		[ $2 -gt 14 ] && { echo "O maximo exibido é de 14 colunas binárias" ; return 1 ; }
		[ -z $3 ] && { echo "Digite o valor em decimal no argumento 3!" ; return 1 ; }

                count=0
                for i in $(seq $2) ; do
                        echo -n '{0..1}'
                done > /tmp/clbinario.tmp

                for j in $(eval echo $(cat /tmp/clbinario.tmp)) ; do
                        echo "$j;$count"
                        count=$(($count + 1))
                done | column -s ';' -t| grep "^.*\s\+$3$" | sed 's/\s\+.*//'

	;;

	*|-h)
		echo "$help"
	;;

	esac
}


CLsql_query() {
	help="
	#
	# Funcao CLsql_query
	# Alan Victor Mesquita Leite
	# 05/09/2016
	#
	# CLsql_query: Funcao mysql_query para shell-script
	#
	# [USO]:
	#	       CLsql_query \"query\"
	#
	# [EXEMPLOS]:
	#	       CLsql_query \"SELECT * FROM TABELA\"
	#	       CLsql_query \"INSERT INTO TABELA VALUES ('1', 'alan', '1984')\"
	#
	# [INFORMACAO]:
	#	       Voce deve usar variaveis para receber os valores de saida da funcao.
	#
	# [HELP]:
	#	       CLsql_query --help
	#
	"


	local user='user'
	local pass="senha"
	local bd='banco'
	local arg1=$1
	local logdir="/var/log/CLsql_query"
	local logfile="$logdir/mysql_query.log"

	[ "$arg1" == '--help' ] && echo "$help"
	[ -d $logdir ] || mkdir $logdir
	[ -e $logfile ] || touch $logfile
	[[ -z $arg1 ]] && { echo 'Funcao com argumento vazio!'; return 1 ; }

	local conexao="mysql -u $user -p$pass --skip-column-names -e"
	saida=$($conexao "use $bd ; $arg1" 2>> $logfile) || return 1
	echo "$saida" | sed 's/\t/\;/g;/^$/d'
}

CLsql_num_rows() {
	help="
	#
	# Funcao CLsql_num_rows
	# Alan Victor Mesquita Leite
	# 05/09/2016
	#
	# CLsql_num_rows: Funcao mysql_num_rows para shell-script
	#
	# [USO]:
	#	       CLsql_num_rows \"$daida_sql_query\"
	#
	# [INFORMACAO]:
	#	      Conta as linhas da saida da funcao CLsql_query
	#
	# [HELP]:
	#	       CLsql_num_rows --help
	#
	"

	local arg1=$1
	[[ -z $arg1 ]] && { echo 'Funcao com argumento vazio!'; return 1 ; }
	[[ $1 == '--help' ]] && { echo "$help"; return 0 ; }
	echo "$arg1" | sed '/^$/d' | wc -l
}

CLverifica_linha() {
	help="
	#
	# Funcao CLverifica_linha
	# Alan Victor Mesquita Leite
	# 21/11/2016
	#
	# CLverifica_linha: verifica linhas/strings em scripts
	#
	# [USO]:
	#	       CLverifica_linhas [string] [extensao]
	#	       CLverifica_linhas logado.php php
	#
	# [INFORMACAO]:
	#	      Verifica se existe X strings dentro de arquivos
	#
	# [HELP]:
	#	       CLverifica_linhas --help
	#
	"


	[[ -z $1 || -z $2 ]] && { echo "$help" ; return 0 ; }
	CLcores --ativar
	files=$(ls *.$2 2>/dev/null)
	for i in $files ; do
	        cat $i | grep -q "$1" && {
	                eco_verde "String $1 existe em $i\n" ;
	        } || {
	                eco_vermelho "String $1 nao existe em $i\n" ;
	        }
	done
}

CLdel_hist() {
      	help="
	#
	# Funcao CLdel_hist
	# Alan Victor Mesquita Leite
	#
	# CLdel_hist: Remove comando do history file e session
	#
	# [USO]:
	#	       CLdel_hist [string/comando]
	#
	# [INFORMACAO]:
	#		USO:
	#		Limpa a string 'rm -rf' da sessão atual
	#		CLdel_hist 'rm -rf'
	#		Limpa a string john do arquivos .bash_history
	#		CLdel_hist 'john' -f
	#
	# [HELP]:
	#	       CLdel_hist --help
	#
	"

	[[ -z $1 ]] && { echo "$help"; return 1 ; }


	if [[ $2 == '-f' ]] ; then
		sed -i "/$1/d" ${HOME}/.bash_history;
	fi

	while : ; do
	        hist=$(history | grep "$1" | sed 's/^\s\+\([0-9]\+\).*/\1/' | sed -n 1p)
	        if [[ ! -z $hist ]] ; then
	                history -d $hist
	        else
	                return 1
	        fi
	done


}

# FINAL DAS FUNCOES.

#######################################################################################

# CHAMADAS DE ARGUMENTOS DO PROGRAMA

		null=/dev/null
		case $1 in

		-l|--list)
			echo -e "\n\n"
			fCL=$(echo $0)
			cat $fCL|egrep -A 5 "Funcao CL[a-z_]{1,}"|\
				egrep -v "OPCOES|USO"|\
				egrep "CL[a-z_]+:"|\
				sed 's/\-\-//;s/^\s\+//g;s/\:\s\+/:/g;s/\.$//;s/$/\./;s/#//g;s/^/\t/'|\
				column -s : -t
				echo -e "\n\n"
			;;

#		-u|--update)
#
#			CLcores --ativar
#			eco_verde "BUSCANDO INFORMAÇÃO DE ATUALIZAÇÃO...\n"
#			rm -rf /tmp/versao_CL &> $null
#			wget https://consultalinux.org/sources/versao_CL -O /tmp/versao_CL &> $null
#			repo_version=$(cat /tmp/versao_CL)
#			local_version=$(cat $0 | sed -n 1,5p | grep 'rev[0-9]\+' | sed 's/^.*rev\([0-9]\+\).*/\1/')
#
#			[[ $repo_version -gt $local_version ]] && {
#				eco_verde_claro "Preparando upgrade...\n"
#				wget https://consultalinux.org/sources/funcoesCL.tar.gz -O /tmp/funcoesCL.tar.gz &> $null &&
#				tar -xf /tmp/funcoesCL.tar.gz -C /etc/ && {
#					eco_verde_claro "funcoesCL atualizado!\n"
#					exit
#				}||{
#					eco_vermelho_claro "ERRO ao atualizar ferramenta, atualize manualmente!\n"
#					echo "LINK: https://consultalinux.org/sources/funcoesCL.tar.gz"
#					exit
#				}
#			}
#
#			[[ $repo_version -eq $local_version ]] && {
#				eco_verde_claro "Você já possui a ultima versão!\n"
#				exit
#			}
#
#			[[ $repo_version -lt $local_version ]] && {
#				eco_verde_claro "Você está usando uma versão de desenvolvimento!\n"
#				exit
#			}
#		;;

		-h|--help)
			clear
			echo "$AJUDA" | more
			;;

		-v|--version)

			CLcores --ativar
			clear
			cabecalho="$0"
			versao=$(cat $cabecalho | sed -n 4p | awk {'print $6'})
			modificado=$(cat $cabecalho | sed -n 8p | sed 's/^.*=\s\+//')

			echo -e "\n\n${tcolor}   Funcoes Consulta Linux (funcoesCL)${finall} ${gcolor}$versao${finall}"
			echo -e "${tcolor}   Biblioteca de ferramentas e mini aplicativos para linha de comando.${finall}"
			echo
			echo -e "${tcolor}   NOME .........: funcoesCL${finall}"
			echo -e "${tcolor}   VERSAO .......: $versao${finall}"
			echo -e "${tcolor}   LICENCA ......: Free Software${finall}"
			echo -e "${tcolor}   INICIO .......: 21 de Novembro de 2013${finall}"
			echo -e "${tcolor}   MODIF ........: $modificado${finall}"
			echo -e "${tcolor}   SITE .........: https://www.consultalinux.org${finall}"
			echo -e "${tcolor}   AUTOR ........: Alan Victor Mesquita Leite    [alanvictorjp gmail com]${finall}\n\n"

			;;

		esac
